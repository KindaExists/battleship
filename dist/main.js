(()=>{"use strict";var e={d:(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};e.d({},{M2:()=>u,H6:()=>d,iB:()=>h});let n=!1,t="vertical";const o=(()=>{document.querySelectorAll(".game-panel");const e=document.querySelectorAll(".gameboard"),a=e[0],l=e[1];function c(e){e.textContent=""}return{renderPlayerBoard:function(e){const l=e.gameboard,s=a;c(s);const i=r.buildPlayerBoard(l);l.areAllShipsPlaced()||i.addEventListener("click",(r=>function(e,r){const a=r.gameboard,l=a.sideLength,c=e.target;if(c.classList.contains("board-cell")){const e=c.parentNode.children,s=Array.from(e).indexOf(c),i=Math.floor(s/l),h=s%l;a.setShip({x:h,y:i},t),o.renderPlayerBoard(r),a.areAllShipsPlaced()&&(n=!0,d())}}(r,e)),!0),s.appendChild(i)},renderOpponentBoard:function(e){const t=e.gameboard,o=l;c(o);const a=r.buildOpponentBoard(t);n&&a.addEventListener("click",(e=>h(e)),!0),o.appendChild(a)}}})(),r={buildPlayerBoard:function(e){const n=document.createElement("div");n.classList.add("board-grid");for(let t of e.board)for(let e of t){const t=document.createElement("div");t.classList.add("board-cell"),e.hasShip()&&e.isChecked?t.classList.add("dead-ship-cell"):e.hasShip()?t.classList.add("live-ship-cell"):e.isChecked&&t.classList.add("cell-checked"),n.appendChild(t)}return n},buildOpponentBoard:function(e){const n=document.createElement("div");n.classList.add("board-grid");for(let t of e.board)for(let e of t){const t=document.createElement("div");t.classList.add("board-cell"),e.hasShip()&&e.isChecked?t.classList.add("dead-ship-cell"):e.isChecked&&t.classList.add("cell-checked"),n.appendChild(t)}return n}};document.getElementById("rotate_button").addEventListener("click",(function(){t="horizontal"===t?"vertical":"horizontal"}));const a=o,l=()=>{const e={isChecked:!1,ship:null,shipIndex:null,assignShip(n,t){e.ship=n,e.shipIndex=t},hasShip:()=>null!==e.ship};return e},c=e=>{const n=e,t=function(e){let n=Array(e);for(let t=0;t<e;t++){n[t]=Array(e);for(let o=0;o<e;o++)n[t][o]=l()}return n}(e);let o=[5,4,3,3,2];function r(){return c.ships.map((e=>e.isSunk())).every((e=>!0===e))}function a(e){return c.board[e.y][e.x]}const c={sideLength:n,board:t,ships:[],missed:[],getCell:a,setShip:function(e,t){const r=((e,n,t)=>{const o={length:e,cells:Array(e).fill(!0),pos:n,orie:t,hit:function(e){o.cells[e]=!1},isSunk:function(){return o.cells.every((e=>0==e))}};return o})(o[0],e,t),l=function(e){const t=e.length,o=e.pos,r=e.orie;let l=[];for(let e=0;e<t;e++){let t;"horizontal"===r?o.x+e<n&&(t=a({x:o.x+e,y:o.y})):"vertical"===r&&o.y+e<n&&(t=a({x:o.x,y:o.y+e})),l.push([t,e])}return!!l.every((e=>void 0!==e[0]&&!e[0].hasShip()))&&(l.forEach((n=>{n[0].assignShip(e,n[1])})),!0)}(r);l&&(c.ships.push(r),o.shift())},areAllShipsSunk:r,areAllShipsPlaced:function(){return o.length<=0},scrambleShips:function(){for(;!c.areAllShipsPlaced();){const e=Math.floor(2*Math.random())?"horizontal":"vertical",t=Math.floor(Math.random()*n),o=Math.floor(Math.random()*n);c.setShip({x:t,y:o},e)}},recieveAttack:function(e){const n=a({x:e.x,y:e.y});if(n.hasShip()){const e=n.ship,t=n.shipIndex;e.hit(t),e.isSunk()&&console.log("SHIP SUNK")}else c.missed.push(e);n.isChecked=!0,r()&&u()},wasCellChecked:function(e){return!0===a(e).isChecked}};return c},s=(e,n=!1)=>{function t(e,n){return!e.gameboard.wasCellChecked(n)&&(e.gameboard.recieveAttack(n),!0)}const o={name:e,isAI:n,gameboard:c(10),attackOpponent:t};return n&&(o.attackRandomCell=function(e){const n=e.gameboard.board.length;let o=!1;for(;!o;)o=t(e,{x:Math.floor(Math.random()*n),y:Math.floor(Math.random()*n)})}),o};let i;function d(){const e=i[1];a.renderOpponentBoard(e)}function h(e){const n=i[0],t=i[1],o=n.gameboard.sideLength,r=e.target;if(r.classList.contains("board-cell")){const e=r.parentNode.children,l=Array.from(e).indexOf(r),c=Math.floor(l/o),s=l%o;let d=!1;if(d=n.attackOpponent(t,{x:s,y:c}),!d)return!1;a.renderOpponentBoard(t),function(){const e=i[0];i[1].attackRandomCell(e),a.renderPlayerBoard(e)}()}}function u(){const e=i[0],t=i[1];e.gameboard.areAllShipsSunk()?p(t):p(e),function(e){n=!1,o.renderPlayerBoard(e[0]),o.renderPlayerBoard(e[1])}(i)}function p(e){console.log(`${e.name} wins!`)}!function(){const e=s("Player"),n=s("CPU",!0);i=[e,n],function(){const e=i[1];e.gameboard.scrambleShips(),a.renderOpponentBoard(e)}(),function(){const e=i[0];a.renderPlayerBoard(e)}()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,