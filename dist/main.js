(()=>{"use strict";const e=(()=>{document.querySelectorAll(".game-panel");const e=document.querySelectorAll(".gameboard");return{createBoards:function(n){e.forEach((e=>{const s=t.buildBoard(n);e.appendChild(s),e.addEventListener("mouseover",(e=>{const t=e.target;t.classList.contains("board-cell")&&console.log(t)}),!0)}))}}})(),t={buildBoard:function(e){const t=document.createElement("div");t.classList.add("board-grid");for(let n=0;n<e;n++){const n=document.createElement("div");n.classList.add("board-row");for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("board-cell"),n.appendChild(e)}t.appendChild(n)}return t}},n=e,s=()=>{const e={isChecked:!1,ship:null,shipIndex:null,assignShip(t,n){e.ship=t,e.shipIndex=n},hasShip:()=>null!==e.ship};return e},o=e=>{const t=function(e){let t=Array(e);for(let n=0;n<e;n++){t[n]=Array(e);for(let o=0;o<e;o++)t[n][o]=s()}return t}(e);function n(e){return o.board[e.y][e.x]}const o={board:t,ships:[],missed:[],setShip(e,t,s){const r=((e,t,n)=>{const s={length:e,cells:Array(e).fill(!0),pos:t,orie:n,hit(e){s.cells[e]=!1},isSunk:()=>s.cells.every((e=>0==e))};return s})(e,t,s);o.ships.push(r),function(e){const t=e.length,s=e.pos,o=e.orie;for(let r=0;r<t;r++)"horizontal"===o&&n({x:s.x+r,y:s.y}).assignShip(e,r),"vertical"===o&&n({x:s.x,y:s.y+r}).assignShip(e,r)}(r)},recieveAttack(e){const t=n({x:e.x,y:e.y});if(t.hasShip()){const e=t.ship,n=t.shipIndex;e.hit(n),e.isSunk()&&o.ships.map((e=>e.isSunk())).every((e=>!0===e))}else o.missed.push(e);t.isChecked=!0},wasCellChecked:e=>!0===n(e).isChecked};return o},r=(e,t=!1)=>{function n(e,t){return!e.gameboard.wasCellChecked(t)&&(e.gameboard.recieveAttack(t),!0)}const s={name:e,isAI:t,gameboard:o(10),attackOpponent:n};return t&&(s.attackRandomCell=function(e){const t=e.gameboard.board.length;let s=!1;for(;!s;)s=n(e,{x:Math.floor(Math.random()*t),y:Math.floor(Math.random()*t)})}),s};!function(){r("One"),r("CPU",!0);n.createBoards(10)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,