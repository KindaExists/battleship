(()=>{"use strict";const e=function(e){const n=document.createElement("div");n.classList.add("board-grid");for(let t of e.board)for(let e of t){const t=document.createElement("div");t.classList.add("board-cell"),e.hasShip()&&e.isChecked?t.classList.add("dead-ship-cell"):e.hasShip()?t.classList.add("live-ship-cell"):e.isChecked&&t.classList.add("cell-checked"),n.appendChild(t)}return n},n=(()=>{const n=document.querySelector("#player .gameboard"),t=document.querySelector("#opponent .gameboard");function r(e){e.textContent=""}return{renderPlayerGameboard:function(t){r(n);const a=e(t);n.appendChild(a)},renderOpponentGameboard:function(n){r(t);const a=e(n);t.appendChild(a)}}})(),t=(()=>{const e=document.querySelector("#player .gameboard"),n=document.querySelector("#opponent .gameboard");function t(e){const n=e,t=n.cloneNode(!0);n.parentNode.replaceChild(t,n)}function r(e,n,t,r){const a=e.target;if(a.classList.contains("board-cell")){const e=n.gameboard.sideLength,o=a.parentNode.children,s=Array.from(o).indexOf(a);let i=[];for(let n=0;n<t;n++){const t=s+n;if(i.push(o[t]),t%e+1>=e)break}i.forEach((e=>{r?e.classList.add("highlighted"):e.classList.remove("highlighted")}))}}function a(e,n){const t=e.target;t.classList.contains("board-cell")&&(n?t.classList.add("highlighted"):t.classList.remove("highlighted"))}const o={attachAddShipEvents:function(n,t,a){e.addEventListener("mouseenter",(e=>r(e,n,a,!0)),!0),e.addEventListener("mouseleave",(e=>r(e,n,a,!1)),!0)},attachAttackEvents:function(e,t){n.addEventListener("mouseenter",(e=>a(e,!0)),!0),n.addEventListener("mouseleave",(e=>a(e,!1)),!0),n.addEventListener("click",(n=>function(e,n,t){const r=e.target;if(r.classList.contains("board-cell")){const e=function(e,n){const t=n.sideLength,r=e.parentNode.children,a=Array.from(r).indexOf(e);return{x:a%t,y:Math.floor(a/t)}}(r,t.gameboard);n.attackOpponent(t,e)&&(i.completeGameTurn(n,t),function(e,n){e.isWinner?i.declareWinner(e):n.isWinner&&i.declareWinner(n)}(n,t))}}(n,e,t)),!0)},clearGridEvents:function(){t(e),t(n)}};return o})(),r=t,a=()=>{const e={isChecked:!1,ship:null,shipIndex:null,assignShip(n,t){e.ship=n,e.shipIndex=t},hasShip:()=>null!==e.ship};return e},o=e=>{const n=e,t=function(e){let n=Array(e);for(let t=0;t<e;t++){n[t]=Array(e);for(let r=0;r<e;r++)n[t][r]=a()}return n}(e);function r(){return s.ships.map((e=>e.isSunk())).every((e=>!0===e))}function o(e){return s.board[e.y][e.x]}const s={sideLength:n,board:t,ships:[],missed:[],getCell:o,setShip:function(e,t,r){const a=((e,n,t)=>{const r={length:e,cells:Array(e).fill(!0),pos:n,orie:t,hit:function(e){r.cells[e]=!1},isSunk:function(){return r.cells.every((e=>0==e))}};return r})(e,t,r),i=function(e){const t=e.length,r=e.pos,a=e.orie;let s=[];for(let e=0;e<t;e++){let t;"horizontal"===a?r.x+e<n&&(t=o({x:r.x+e,y:r.y})):"vertical"===a&&r.y+e<n&&(t=o({x:r.x,y:r.y+e})),s.push([t,e])}return!!s.every((e=>void 0!==e[0]&&!e[0].hasShip()))&&(s.forEach((n=>{n[0].assignShip(e,n[1])})),!0)}(a);return i&&s.ships.push(a),i},areAllShipsSunk:r,scrambleShips:function(e){let t=0;for(;t<e.length;){const r=Math.floor(2*Math.random())?"horizontal":"vertical",a=Math.floor(Math.random()*n),o=Math.floor(Math.random()*n);s.setShip(e[t],{x:a,y:o},r)&&t++}},recieveAttack:function(e){const n=o({x:e.x,y:e.y});if(n.hasShip()){const e=n.ship,t=n.shipIndex;e.hit(t),e.isSunk()&&console.log("Ship Sunk")}else s.missed.push(e);return n.isChecked=!0,r()},wasCellChecked:function(e){return!0===o(e).isChecked}};return s},s=(e,n=!1)=>{function t(e,n){return!e.gameboard.wasCellChecked(n)&&(e.gameboard.recieveAttack(n)&&(r.isWinner=!0),!0)}const r={name:e,isAI:n,gameboard:o(10),attackOpponent:t,isWinner:!1};return n&&(r.attackRandomCell=function(e){const n=e.gameboard.board.length;let r=!1;for(;!r;)r=t(e,{x:Math.floor(Math.random()*n),y:Math.floor(Math.random()*n)})}),r},i=(()=>{function e(e,n){r.attachAddShipEvents(e,n,5)}return{setupGame:function(){const t=s("User"),r=s("Computer",!0);n.renderPlayerGameboard(t.gameboard),n.renderOpponentGameboard(r.gameboard),e(t,r)},beginShipSetupPhase:e,beginAttackPhase:function(e,n){r.attachAttackEvents(e,n)},completeGameTurn:function(e,t){t.attackRandomCell(e),n.renderOpponentGameboard(t.gameboard),n.renderPlayerGameboard(e.gameboard)},declareWinner:function(e){r.clearGridEvents(),console.log(`${e.name} wins!`)}}})();i.setupGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,