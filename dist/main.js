(()=>{"use strict";const e=function(e){const t=document.createElement("div");t.classList.add("board-grid");for(let n of e.board)for(let e of n){const n=document.createElement("div");n.classList.add("board-cell"),e.hasShip()&&e.isChecked?n.classList.add("dead-ship-cell"):e.hasShip()?n.classList.add("live-ship-cell"):e.isChecked&&n.classList.add("cell-checked"),t.appendChild(n)}return t},t=function(e){const t=document.createElement("div");t.classList.add("board-grid");for(let n of e.board)for(let e of n){const n=document.createElement("div");n.classList.add("board-cell"),e.hasShip()&&e.isChecked?n.classList.add("dead-ship-cell"):e.isChecked&&n.classList.add("cell-checked"),t.appendChild(n)}return t},n=(()=>{const n=document.querySelector("#output_text");function a(e){e.textContent=""}return{renderPlayerGameboard:function(t){const n=document.querySelector("#player .gameboard");a(n);const o=e(t);n.appendChild(o)},renderOpponentGameboard:function(e){const n=document.querySelector("#opponent .gameboard");a(n);const o=t(e);n.appendChild(o)},editOutputText:function(e){n.textContent=e}}})(),a=(()=>{let e=document.querySelector("#player .gameboard"),t=document.querySelector("#opponent .gameboard");const n=document.querySelector("#rotate_button");let a="horizontal",o=[5,4,3,3,2];function r(){c(e),c(t),e=document.querySelector("#player .gameboard"),t=document.querySelector("#opponent .gameboard")}function c(e){const t=e,n=t.cloneNode(!0);t.parentNode.replaceChild(n,t)}function i(e,t,n){const r=e.target;if(r.classList.contains("board-cell")){const e=o[0],c=t.gameboard.sideLength,i=r.parentNode.children,s=Array.from(i).indexOf(r);let d=[];for(let t=0;t<e;t++)if("horizontal"===a){const e=s+t;if(d.push(i[e]),e%c+1>=c)break}else{const e=s+t*c;if(d.push(i[e]),Math.floor(e/c)+1>=c)break}d.forEach((e=>{n?e.classList.add("highlighted"):e.classList.remove("highlighted")}))}}function d(e,t){const n=t.sideLength,a=e.parentNode.children,o=Array.from(a).indexOf(e);return{x:o%n,y:Math.floor(o/n)}}function l(e,t){const n=e.target;n.classList.contains("board-cell")&&(t?n.classList.add("highlighted"):n.classList.remove("highlighted"))}function h(){a="horizontal"===a?"vertical":"horizontal"}const u={attachAddShipEvents:function(t,c){e.addEventListener("mouseenter",(e=>i(e,t,!0)),!0),e.addEventListener("mouseleave",(e=>i(e,t,!1)),!0),e.addEventListener("click",(e=>function(e,t,n){const c=e.target;if(c.classList.contains("board-cell")){const e=t.gameboard,i=d(c,e);e.setShip(o[0],i,a)&&(s.completePlacementTurn(t,n,o[0]),o.shift(),o.length<=0&&(r(),s.beginAttackPhase(t,n)))}}(e,t,c)),!0),n.addEventListener("click",h)},attachAttackEvents:function(e,n){t.addEventListener("mouseenter",(e=>l(e,!0)),!0),t.addEventListener("mouseleave",(e=>l(e,!1)),!0),t.addEventListener("click",(t=>function(e,t,n){const a=e.target;if(a.classList.contains("board-cell")){const e=d(a,n.gameboard);t.attackOpponent(n,e)&&(s.completeGameTurn(t,n),function(e,t){e.isWinner?s.declareWinner(e):t.isWinner&&s.declareWinner(t)}(t,n))}}(t,e,n)),!0)},clearGridEvents:r};return u})(),o=a,r=()=>{const e={isChecked:!1,ship:null,shipIndex:null,assignShip(t,n){e.ship=t,e.shipIndex=n},hasShip:()=>null!==e.ship};return e},c=e=>{const t=e,a=function(e){let t=Array(e);for(let n=0;n<e;n++){t[n]=Array(e);for(let a=0;a<e;a++)t[n][a]=r()}return t}(e);function o(){return i.ships.map((e=>e.isSunk())).every((e=>!0===e))}function c(e){return i.board[e.y][e.x]}const i={sideLength:t,board:a,ships:[],missed:[],getCell:c,setShip:function(e,n,a){const o=((e,t,n)=>{const a={length:e,cells:Array(e).fill(!0),pos:t,orie:n,hit:function(e){a.cells[e]=!1},isSunk:function(){return a.cells.every((e=>0==e))}};return a})(e,n,a),r=function(e){const n=e.length,a=e.pos,o=e.orie;let r=[];for(let e=0;e<n;e++){let n;"horizontal"===o?a.x+e<t&&(n=c({x:a.x+e,y:a.y})):"vertical"===o&&a.y+e<t&&(n=c({x:a.x,y:a.y+e})),r.push([n,e])}return!!r.every((e=>void 0!==e[0]&&!e[0].hasShip()))&&(r.forEach((t=>{t[0].assignShip(e,t[1])})),!0)}(o);return r&&i.ships.push(o),r},areAllShipsSunk:o,placeShipRandomly:function(e){for(;;){const n=Math.floor(2*Math.random())?"horizontal":"vertical",a=Math.floor(Math.random()*t),o=Math.floor(Math.random()*t);if(i.setShip(e,{x:a,y:o},n))break}},recieveAttack:function(e){const t=c({x:e.x,y:e.y});if(t.hasShip()){const e=t.ship,a=t.shipIndex;e.hit(a),e.isSunk()&&n.editOutputText(`${e.length}-Cell Long Ship Sunk`)}else i.missed.push(e);return t.isChecked=!0,o()},wasCellChecked:function(e){return!0===c(e).isChecked}};return i},i=(e,t=!1)=>{function n(e,t){return!e.gameboard.wasCellChecked(t)&&(e.gameboard.recieveAttack(t)&&(a.isWinner=!0),!0)}const a={name:e,isAI:t,gameboard:c(10),attackOpponent:n,isWinner:!1};return t&&(a.attackRandomCell=function(e){const t=e.gameboard.board.length;let a=!1;for(;!a;)a=n(e,{x:Math.floor(Math.random()*t),y:Math.floor(Math.random()*t)})}),a},s={setupGame:function(){const e=i("User"),t=i("Computer",!0);n.renderPlayerGameboard(e.gameboard),n.renderOpponentGameboard(t.gameboard),function(e,t){o.attachAddShipEvents(e,t)}(e,t)},beginAttackPhase:function(e,t){o.attachAttackEvents(e,t)},completePlacementTurn:function(e,t,a){t.gameboard.placeShipRandomly(a),n.renderPlayerGameboard(e.gameboard),n.renderOpponentGameboard(t.gameboard)},completeGameTurn:function(e,t){t.attackRandomCell(e),n.renderPlayerGameboard(e.gameboard),n.renderOpponentGameboard(t.gameboard)},declareWinner:function(e){o.clearGridEvents(),n.editOutputText(`All ships sunk, ${e.name} wins!`)}};s.setupGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,