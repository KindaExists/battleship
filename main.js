(()=>{"use strict";var e={d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};e.d({},{M2:()=>h,H6:()=>i,iB:()=>d});let n=!1;const t=(()=>{document.querySelectorAll(".game-panel");const e=document.querySelectorAll(".gameboard"),o=e[0],a=e[1];function l(e){e.textContent=""}return{renderPlayerBoard:function(e){const a=e.gameboard,s=o;l(s);const c=r.buildPlayerBoard(a);a.areAllShipsPlaced()||c.addEventListener("click",(r=>function(e,r){const o=r.gameboard,a=o.sideLength,l=e.target;if(l.classList.contains("board-cell")){const e=l.parentNode.children,s=Array.from(e).indexOf(l),c=Math.floor(s/a),d=s%a;o.setShip({x:d,y:c},"vertical"),t.renderPlayerBoard(r),o.areAllShipsPlaced()&&(n=!0,i())}}(r,e)),!0),s.appendChild(c)},renderOpponentBoard:function(e){const t=e.gameboard,o=a;l(o);const s=r.buildOpponentBoard(t);n&&s.addEventListener("click",(e=>d(e)),!0),o.appendChild(s)}}})(),r={buildPlayerBoard:function(e){const n=document.createElement("div");n.classList.add("board-grid");for(let t of e.board)for(let e of t){const t=document.createElement("div");t.classList.add("board-cell"),e.hasShip()&&e.isChecked?t.classList.add("dead-ship-cell"):e.hasShip()?t.classList.add("live-ship-cell"):e.isChecked&&t.classList.add("cell-checked"),n.appendChild(t)}return n},buildOpponentBoard:function(e){const n=document.createElement("div");n.classList.add("board-grid");for(let t of e.board)for(let e of t){const t=document.createElement("div");t.classList.add("board-cell"),e.hasShip()&&e.isChecked?t.classList.add("dead-ship-cell"):e.isChecked&&t.classList.add("cell-checked"),n.appendChild(t)}return n}},o=t,a=()=>{const e={isChecked:!1,ship:null,shipIndex:null,assignShip(n,t){e.ship=n,e.shipIndex=t},hasShip:()=>null!==e.ship};return e},l=e=>{const n=e,t=function(e){let n=Array(e);for(let t=0;t<e;t++){n[t]=Array(e);for(let r=0;r<e;r++)n[t][r]=a()}return n}(e);let r=[5,4,3,3,2];function o(){return s.ships.map((e=>e.isSunk())).every((e=>!0===e))}function l(e){return s.board[e.y][e.x]}const s={sideLength:n,board:t,ships:[],missed:[],getCell:l,setShip:function(e,t){const o=((e,n,t)=>{const r={length:e,cells:Array(e).fill(!0),pos:n,orie:t,hit:function(e){r.cells[e]=!1},isSunk:function(){return r.cells.every((e=>0==e))}};return r})(r[0],e,t),a=function(e){const t=e.length,r=e.pos,o=e.orie;let a=[];for(let e=0;e<t;e++){let t;"horizontal"===o?r.x+e<n&&(t=l({x:r.x+e,y:r.y})):"vertical"===o&&r.y+e<n&&(t=l({x:r.x,y:r.y+e})),a.push([t,e])}return!!a.every((e=>void 0!==e[0]&&!e[0].hasShip()))&&(a.forEach((n=>{n[0].assignShip(e,n[1])})),!0)}(o);a&&(s.ships.push(o),r.shift())},areAllShipsSunk:o,areAllShipsPlaced:function(){return r.length<=0},scrambleShips:function(){for(;!s.areAllShipsPlaced();){const e=Math.floor(2*Math.random())?"horizontal":"vertical",t=Math.floor(Math.random()*n),r=Math.floor(Math.random()*n);s.setShip({x:t,y:r},e)}},recieveAttack:function(e){const n=l({x:e.x,y:e.y});if(n.hasShip()){const e=n.ship,t=n.shipIndex;e.hit(t),e.isSunk()&&console.log("SHIP SUNK")}else s.missed.push(e);n.isChecked=!0,o()&&h()},wasCellChecked:function(e){return!0===l(e).isChecked}};return s},s=(e,n=!1)=>{function t(e,n){return!e.gameboard.wasCellChecked(n)&&(e.gameboard.recieveAttack(n),!0)}const r={name:e,isAI:n,gameboard:l(10),attackOpponent:t};return n&&(r.attackRandomCell=function(e){const n=e.gameboard.board.length;let r=!1;for(;!r;)r=t(e,{x:Math.floor(Math.random()*n),y:Math.floor(Math.random()*n)})}),r};let c;function i(){const e=c[1];o.renderOpponentBoard(e)}function d(e){const n=c[0],t=c[1],r=n.gameboard.sideLength,a=e.target;if(a.classList.contains("board-cell")){const e=a.parentNode.children,l=Array.from(e).indexOf(a),s=Math.floor(l/r),i=l%r;let d=!1;if(d=n.attackOpponent(t,{x:i,y:s}),!d)return!1;o.renderOpponentBoard(t),function(){const e=c[0];c[1].attackRandomCell(e),o.renderPlayerBoard(e)}()}}function h(){const e=c[0],r=c[1];e.gameboard.areAllShipsSunk()?p(r):p(e),function(e){n=!1,t.renderPlayerBoard(e[0]),t.renderPlayerBoard(e[1])}(c)}function p(e){console.log(`${e.name} wins!`)}!function(){const e=s("Player"),n=s("CPU",!0);c=[e,n],function(){const e=c[1];e.gameboard.scrambleShips(),o.renderOpponentBoard(e)}(),function(){const e=c[0];o.renderPlayerBoard(e)}()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,